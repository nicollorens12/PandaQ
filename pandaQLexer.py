# Generated from pandaQ.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,228,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,5,30,181,8,30,10,30,12,30,184,9,30,1,31,4,31,187,8,31,11,31,
        12,31,188,1,31,1,31,4,31,193,8,31,11,31,12,31,194,3,31,197,8,31,
        1,32,1,32,5,32,201,8,32,10,32,12,32,204,9,32,1,32,1,32,1,33,1,33,
        1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,
        4,36,223,8,36,11,36,12,36,224,1,36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,
        25,2,0,83,83,115,115,2,0,69,69,101,101,2,0,76,76,108,108,2,0,67,
        67,99,99,2,0,84,84,116,116,2,0,70,70,102,102,2,0,82,82,114,114,2,
        0,79,79,111,111,2,0,77,77,109,109,2,0,65,65,97,97,2,0,68,68,100,
        100,2,0,66,66,98,98,2,0,89,89,121,121,2,0,87,87,119,119,2,0,72,72,
        104,104,2,0,78,78,110,110,2,0,73,73,105,105,2,0,74,74,106,106,2,
        0,80,80,112,112,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,48,57,1,0,39,39,2,0,85,85,117,117,3,0,9,10,13,13,32,32,233,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,82,1,0,0,0,5,87,1,0,0,0,7,90,
        1,0,0,0,9,96,1,0,0,0,11,99,1,0,0,0,13,103,1,0,0,0,15,108,1,0,0,0,
        17,114,1,0,0,0,19,117,1,0,0,0,21,121,1,0,0,0,23,125,1,0,0,0,25,131,
        1,0,0,0,27,136,1,0,0,0,29,139,1,0,0,0,31,144,1,0,0,0,33,147,1,0,
        0,0,35,149,1,0,0,0,37,151,1,0,0,0,39,153,1,0,0,0,41,155,1,0,0,0,
        43,157,1,0,0,0,45,159,1,0,0,0,47,161,1,0,0,0,49,163,1,0,0,0,51,165,
        1,0,0,0,53,168,1,0,0,0,55,170,1,0,0,0,57,173,1,0,0,0,59,175,1,0,
        0,0,61,178,1,0,0,0,63,186,1,0,0,0,65,198,1,0,0,0,67,207,1,0,0,0,
        69,212,1,0,0,0,71,218,1,0,0,0,73,222,1,0,0,0,75,76,7,0,0,0,76,77,
        7,1,0,0,77,78,7,2,0,0,78,79,7,1,0,0,79,80,7,3,0,0,80,81,7,4,0,0,
        81,2,1,0,0,0,82,83,7,5,0,0,83,84,7,6,0,0,84,85,7,7,0,0,85,86,7,8,
        0,0,86,4,1,0,0,0,87,88,7,9,0,0,88,89,7,0,0,0,89,6,1,0,0,0,90,91,
        7,7,0,0,91,92,7,6,0,0,92,93,7,10,0,0,93,94,7,1,0,0,94,95,7,6,0,0,
        95,8,1,0,0,0,96,97,7,11,0,0,97,98,7,12,0,0,98,10,1,0,0,0,99,100,
        7,9,0,0,100,101,7,0,0,0,101,102,7,3,0,0,102,12,1,0,0,0,103,104,7,
        10,0,0,104,105,7,1,0,0,105,106,7,0,0,0,106,107,7,3,0,0,107,14,1,
        0,0,0,108,109,7,13,0,0,109,110,7,14,0,0,110,111,7,1,0,0,111,112,
        7,6,0,0,112,113,7,1,0,0,113,16,1,0,0,0,114,115,7,7,0,0,115,116,7,
        6,0,0,116,18,1,0,0,0,117,118,7,9,0,0,118,119,7,15,0,0,119,120,7,
        10,0,0,120,20,1,0,0,0,121,122,7,15,0,0,122,123,7,7,0,0,123,124,7,
        4,0,0,124,22,1,0,0,0,125,126,7,16,0,0,126,127,7,15,0,0,127,128,7,
        15,0,0,128,129,7,1,0,0,129,130,7,6,0,0,130,24,1,0,0,0,131,132,7,
        17,0,0,132,133,7,7,0,0,133,134,7,16,0,0,134,135,7,15,0,0,135,26,
        1,0,0,0,136,137,7,7,0,0,137,138,7,15,0,0,138,28,1,0,0,0,139,140,
        7,18,0,0,140,141,7,2,0,0,141,142,7,7,0,0,142,143,7,4,0,0,143,30,
        1,0,0,0,144,145,7,16,0,0,145,146,7,15,0,0,146,32,1,0,0,0,147,148,
        5,42,0,0,148,34,1,0,0,0,149,150,5,44,0,0,150,36,1,0,0,0,151,152,
        5,59,0,0,152,38,1,0,0,0,153,154,5,40,0,0,154,40,1,0,0,0,155,156,
        5,41,0,0,156,42,1,0,0,0,157,158,5,47,0,0,158,44,1,0,0,0,159,160,
        5,43,0,0,160,46,1,0,0,0,161,162,5,45,0,0,162,48,1,0,0,0,163,164,
        5,61,0,0,164,50,1,0,0,0,165,166,5,60,0,0,166,167,5,62,0,0,167,52,
        1,0,0,0,168,169,5,60,0,0,169,54,1,0,0,0,170,171,5,60,0,0,171,172,
        5,61,0,0,172,56,1,0,0,0,173,174,5,62,0,0,174,58,1,0,0,0,175,176,
        5,62,0,0,176,177,5,61,0,0,177,60,1,0,0,0,178,182,7,19,0,0,179,181,
        7,20,0,0,180,179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,
        1,0,0,0,183,62,1,0,0,0,184,182,1,0,0,0,185,187,7,21,0,0,186,185,
        1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,196,
        1,0,0,0,190,192,5,46,0,0,191,193,7,21,0,0,192,191,1,0,0,0,193,194,
        1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,190,
        1,0,0,0,196,197,1,0,0,0,197,64,1,0,0,0,198,202,5,39,0,0,199,201,
        8,22,0,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,
        1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,206,5,39,0,0,206,66,
        1,0,0,0,207,208,7,4,0,0,208,209,7,6,0,0,209,210,7,23,0,0,210,211,
        7,1,0,0,211,68,1,0,0,0,212,213,7,5,0,0,213,214,7,9,0,0,214,215,7,
        2,0,0,215,216,7,0,0,0,216,217,7,1,0,0,217,70,1,0,0,0,218,219,5,58,
        0,0,219,220,5,61,0,0,220,72,1,0,0,0,221,223,7,24,0,0,222,221,1,0,
        0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,226,1,0,
        0,0,226,227,6,36,0,0,227,74,1,0,0,0,7,0,182,188,194,196,202,224,
        1,6,0,0
    ]

class pandaQLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SELECT = 1
    FROM = 2
    AS = 3
    ORDER = 4
    BY = 5
    ASC = 6
    DESC = 7
    WHERE = 8
    OR = 9
    AND = 10
    NOT = 11
    INNER = 12
    JOIN = 13
    ON = 14
    PLOT = 15
    IN = 16
    STAR = 17
    COMMA = 18
    SEMICOLON = 19
    LPAREN = 20
    RPAREN = 21
    DIV = 22
    PLUS = 23
    MINUS = 24
    EQUAL = 25
    NOT_EQUAL = 26
    LESS = 27
    LESS_OR_EQUAL = 28
    GREATER = 29
    GREATER_OR_EQUAL = 30
    ID = 31
    NUMBER = 32
    STRING = 33
    TRUE = 34
    FALSE = 35
    ASSIG = 36
    WS = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'*'", "','", "';'", "'('", "')'", "'/'", "'+'", "'-'", "'='", 
            "'<>'", "'<'", "'<='", "'>'", "'>='", "':='" ]

    symbolicNames = [ "<INVALID>",
            "SELECT", "FROM", "AS", "ORDER", "BY", "ASC", "DESC", "WHERE", 
            "OR", "AND", "NOT", "INNER", "JOIN", "ON", "PLOT", "IN", "STAR", 
            "COMMA", "SEMICOLON", "LPAREN", "RPAREN", "DIV", "PLUS", "MINUS", 
            "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
            "ID", "NUMBER", "STRING", "TRUE", "FALSE", "ASSIG", "WS" ]

    ruleNames = [ "SELECT", "FROM", "AS", "ORDER", "BY", "ASC", "DESC", 
                  "WHERE", "OR", "AND", "NOT", "INNER", "JOIN", "ON", "PLOT", 
                  "IN", "STAR", "COMMA", "SEMICOLON", "LPAREN", "RPAREN", 
                  "DIV", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "LESS", 
                  "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", "ID", 
                  "NUMBER", "STRING", "TRUE", "FALSE", "ASSIG", "WS" ]

    grammarFileName = "pandaQ.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


