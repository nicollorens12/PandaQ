# Generated from pandaQ.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,221,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,
        1,30,1,31,1,31,5,31,183,8,31,10,31,12,31,186,9,31,1,32,4,32,189,
        8,32,11,32,12,32,190,1,32,1,32,4,32,195,8,32,11,32,12,32,196,3,32,
        199,8,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
        1,35,1,35,1,35,1,36,4,36,216,8,36,11,36,12,36,217,1,36,1,36,0,0,
        37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,1,0,24,2,0,83,83,115,115,2,0,69,69,101,101,2,0,76,
        76,108,108,2,0,67,67,99,99,2,0,84,84,116,116,2,0,70,70,102,102,2,
        0,82,82,114,114,2,0,79,79,111,111,2,0,77,77,109,109,2,0,65,65,97,
        97,2,0,68,68,100,100,2,0,66,66,98,98,2,0,89,89,121,121,2,0,87,87,
        119,119,2,0,72,72,104,104,2,0,78,78,110,110,2,0,73,73,105,105,2,
        0,74,74,106,106,2,0,80,80,112,112,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,2,0,85,85,117,117,3,0,9,10,13,13,
        32,32,225,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,0,5,84,1,
        0,0,0,7,89,1,0,0,0,9,92,1,0,0,0,11,98,1,0,0,0,13,101,1,0,0,0,15,
        105,1,0,0,0,17,110,1,0,0,0,19,116,1,0,0,0,21,119,1,0,0,0,23,123,
        1,0,0,0,25,127,1,0,0,0,27,133,1,0,0,0,29,138,1,0,0,0,31,141,1,0,
        0,0,33,146,1,0,0,0,35,149,1,0,0,0,37,151,1,0,0,0,39,153,1,0,0,0,
        41,155,1,0,0,0,43,157,1,0,0,0,45,159,1,0,0,0,47,161,1,0,0,0,49,163,
        1,0,0,0,51,165,1,0,0,0,53,167,1,0,0,0,55,170,1,0,0,0,57,172,1,0,
        0,0,59,175,1,0,0,0,61,177,1,0,0,0,63,180,1,0,0,0,65,188,1,0,0,0,
        67,200,1,0,0,0,69,205,1,0,0,0,71,211,1,0,0,0,73,215,1,0,0,0,75,76,
        5,39,0,0,76,2,1,0,0,0,77,78,7,0,0,0,78,79,7,1,0,0,79,80,7,2,0,0,
        80,81,7,1,0,0,81,82,7,3,0,0,82,83,7,4,0,0,83,4,1,0,0,0,84,85,7,5,
        0,0,85,86,7,6,0,0,86,87,7,7,0,0,87,88,7,8,0,0,88,6,1,0,0,0,89,90,
        7,9,0,0,90,91,7,0,0,0,91,8,1,0,0,0,92,93,7,7,0,0,93,94,7,6,0,0,94,
        95,7,10,0,0,95,96,7,1,0,0,96,97,7,6,0,0,97,10,1,0,0,0,98,99,7,11,
        0,0,99,100,7,12,0,0,100,12,1,0,0,0,101,102,7,9,0,0,102,103,7,0,0,
        0,103,104,7,3,0,0,104,14,1,0,0,0,105,106,7,10,0,0,106,107,7,1,0,
        0,107,108,7,0,0,0,108,109,7,3,0,0,109,16,1,0,0,0,110,111,7,13,0,
        0,111,112,7,14,0,0,112,113,7,1,0,0,113,114,7,6,0,0,114,115,7,1,0,
        0,115,18,1,0,0,0,116,117,7,7,0,0,117,118,7,6,0,0,118,20,1,0,0,0,
        119,120,7,9,0,0,120,121,7,15,0,0,121,122,7,10,0,0,122,22,1,0,0,0,
        123,124,7,15,0,0,124,125,7,7,0,0,125,126,7,4,0,0,126,24,1,0,0,0,
        127,128,7,16,0,0,128,129,7,15,0,0,129,130,7,15,0,0,130,131,7,1,0,
        0,131,132,7,6,0,0,132,26,1,0,0,0,133,134,7,17,0,0,134,135,7,7,0,
        0,135,136,7,16,0,0,136,137,7,15,0,0,137,28,1,0,0,0,138,139,7,7,0,
        0,139,140,7,15,0,0,140,30,1,0,0,0,141,142,7,18,0,0,142,143,7,2,0,
        0,143,144,7,7,0,0,144,145,7,4,0,0,145,32,1,0,0,0,146,147,7,16,0,
        0,147,148,7,15,0,0,148,34,1,0,0,0,149,150,5,42,0,0,150,36,1,0,0,
        0,151,152,5,44,0,0,152,38,1,0,0,0,153,154,5,59,0,0,154,40,1,0,0,
        0,155,156,5,40,0,0,156,42,1,0,0,0,157,158,5,41,0,0,158,44,1,0,0,
        0,159,160,5,47,0,0,160,46,1,0,0,0,161,162,5,43,0,0,162,48,1,0,0,
        0,163,164,5,45,0,0,164,50,1,0,0,0,165,166,5,61,0,0,166,52,1,0,0,
        0,167,168,5,60,0,0,168,169,5,62,0,0,169,54,1,0,0,0,170,171,5,60,
        0,0,171,56,1,0,0,0,172,173,5,60,0,0,173,174,5,61,0,0,174,58,1,0,
        0,0,175,176,5,62,0,0,176,60,1,0,0,0,177,178,5,62,0,0,178,179,5,61,
        0,0,179,62,1,0,0,0,180,184,7,19,0,0,181,183,7,20,0,0,182,181,1,0,
        0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,64,1,0,0,
        0,186,184,1,0,0,0,187,189,7,21,0,0,188,187,1,0,0,0,189,190,1,0,0,
        0,190,188,1,0,0,0,190,191,1,0,0,0,191,198,1,0,0,0,192,194,5,46,0,
        0,193,195,7,21,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,
        0,196,197,1,0,0,0,197,199,1,0,0,0,198,192,1,0,0,0,198,199,1,0,0,
        0,199,66,1,0,0,0,200,201,7,4,0,0,201,202,7,6,0,0,202,203,7,22,0,
        0,203,204,7,1,0,0,204,68,1,0,0,0,205,206,7,5,0,0,206,207,7,9,0,0,
        207,208,7,2,0,0,208,209,7,0,0,0,209,210,7,1,0,0,210,70,1,0,0,0,211,
        212,5,58,0,0,212,213,5,61,0,0,213,72,1,0,0,0,214,216,7,23,0,0,215,
        214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,
        219,1,0,0,0,219,220,6,36,0,0,220,74,1,0,0,0,6,0,184,190,196,198,
        217,1,6,0,0
    ]

class pandaQLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    SELECT = 2
    FROM = 3
    AS = 4
    ORDER = 5
    BY = 6
    ASC = 7
    DESC = 8
    WHERE = 9
    OR = 10
    AND = 11
    NOT = 12
    INNER = 13
    JOIN = 14
    ON = 15
    PLOT = 16
    IN = 17
    STAR = 18
    COMMA = 19
    SEMICOLON = 20
    LPAREN = 21
    RPAREN = 22
    DIV = 23
    PLUS = 24
    MINUS = 25
    EQUAL = 26
    NOT_EQUAL = 27
    LESS = 28
    LESS_OR_EQUAL = 29
    GREATER = 30
    GREATER_OR_EQUAL = 31
    ID = 32
    NUMBER = 33
    TRUE = 34
    FALSE = 35
    ASSIG = 36
    WS = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'''", "'*'", "','", "';'", "'('", "')'", "'/'", "'+'", "'-'", 
            "'='", "'<>'", "'<'", "'<='", "'>'", "'>='", "':='" ]

    symbolicNames = [ "<INVALID>",
            "SELECT", "FROM", "AS", "ORDER", "BY", "ASC", "DESC", "WHERE", 
            "OR", "AND", "NOT", "INNER", "JOIN", "ON", "PLOT", "IN", "STAR", 
            "COMMA", "SEMICOLON", "LPAREN", "RPAREN", "DIV", "PLUS", "MINUS", 
            "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
            "ID", "NUMBER", "TRUE", "FALSE", "ASSIG", "WS" ]

    ruleNames = [ "T__0", "SELECT", "FROM", "AS", "ORDER", "BY", "ASC", 
                  "DESC", "WHERE", "OR", "AND", "NOT", "INNER", "JOIN", 
                  "ON", "PLOT", "IN", "STAR", "COMMA", "SEMICOLON", "LPAREN", 
                  "RPAREN", "DIV", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL", 
                  "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
                  "ID", "NUMBER", "TRUE", "FALSE", "ASSIG", "WS" ]

    grammarFileName = "pandaQ.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


